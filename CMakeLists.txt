CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# 工程名
PROJECT(Learn_Practise CXX)

# 支持简版 if else
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

# 使用相对路径，生成的工程文件使用相对路径
SET(CMAKE_USE_RELATIVE_PATHS true)

# 强制重新生成工程文件
SET(CMAKE_SUPPRESS_REGENERATION true) 

# 定义工程的顶级路径,CMAKE_CURRENT_SOURCE_DIR（当前处理的CMakeLists.txt所在的路径）
SET(PROJDIR ${CMAKE_CURRENT_SOURCE_DIR})

# 设置输出路径,SET(EXECUTABLE_OUTPUT_PATH <新路径>)并不会对此变量有影响,只是改变了最终目标文件的存储路径
SET(EXECUTABLE_OUTPUT_PATH ${Learn_Practise_BINARY_DIR}/bin_cache)
SET(LIBRARY_OUTPUT_PATH  ${Learn_Practise_BINARY_DIR}/bin_cache)

LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})

# 添加CMake的模块文件的查找路径，被包含进来的CMake模块会插入到此处
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Tools/CMake)
INCLUDE(PrecompileHeader)
INCLUDE(3rdLib)


#增加子目录
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/DataStructHelper)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/EffectiveC++)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/HelperLib)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/Newknowledge_Test)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/WinKernelProgramme)